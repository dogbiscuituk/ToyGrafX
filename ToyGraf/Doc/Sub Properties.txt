Which properties are invalidated by changes in which other propertoies?

CameraView
 \
  CameraPosition
  CameraRotation

Projection
 \
  AspectRatio
  FarPlane
  FieldOfView
  NearPlane

Transform
 \
  Location
  Orientation
  Scale




Scene properties:
 \
  Accumulator Colour Format
  Colour Format
  Camera Position
  Camera Rotation°

When selected, 
 \
  PropertyGrid.SelectedObject is a Scene;
  PropertyGrid.SelectedObjects is an array of objects: {Scene}.

Trace properties:
 \
  Location
  Maximum
  Minimum
  Orientation°
  Scale
  Strip Count

When selected with one trace, 
 \
  PropertyGrid.SelectedObject is a Trace;
  PropertyGrid.SelectedObjects is an array of objects: {Trace}.

When selected with 2+ traces, 
 \
  PropertyGrid.SelectedObject is a Trace;
  PropertyGrid.SelectedObjects is an array of objects: {Trace#1, Trace#2}.
  
  


======================================================== PropertyPath[0], [1],...

--------------------------------------------------------------------- Categorized

Red			Accumulator Colour Format	Graphics Mode	New scene
Green			Accumulator Colour Format	Graphics Mode	New scene
Blue			Accumulator Colour Format	Graphics Mode	New scene
Alpha			Accumulator Colour Format	Graphics Mode	New scene

Background Colour	Graphics Mode			New Scene
Buffers			Graphics Mode			New Scene

Red			Colour Format			Graphics Mode	New scene
Green			Colour Format			Graphics Mode	New scene
Blue			Colour Format			Graphics Mode	New scene
Alpha			Colour Format			Graphics Mode	New scene

X			Camera Position			Scene		New scene
Y			Camera Position			Scene		New scene
Z			Camera Position			Scene		New scene

Pitch			Camera Rotation°		Scene		New scene
Yaw			Camera Rotation°		Scene		New scene
Roll			Camera Rotation°		Scene		New scene

-------------------------------------------------------------------- Alphabetical

Red			Accumulator Colour Format	New scene
Green			Accumulator Colour Format	New scene
Blue			Accumulator Colour Format	New scene
Alpha			Accumulator Colour Format	New scene

Background Colour	New Scene
Buffers			New Scene

Red			Colour Format			New scene
Green			Colour Format			New scene
Blue			Colour Format			New scene
Alpha			Colour Format			New scene

X			Camera Position			New scene
Y			Camera Position			New scene
Z			Camera Position			New scene

Pitch			Camera Rotation°		New scene
Yaw			Camera Rotation°		New scene
Roll			Camera Rotation°		New scene







        private void ReloadTraces()
        {
            ShaderStart();
            LoadProjection();
            LoadCameraView();
            for (int traceIndex = 0; traceIndex < Scene._Traces.Count; traceIndex++)
            {
                var trace = Scene._Traces[traceIndex];
                ValidateVao(trace);

                UnbindVao();
            }
            ShaderStop();
        }

        internal void Render()
        {
            if (!MakeCurrent(true))
                return;
            GL.Enable(EnableCap.DepthTest);
            GL.Enable(EnableCap.Texture2D);
            GL.ClearColor(Scene.BackgroundColour);
            GL.Clear(ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit);
            ValidateCameraView();
            ValidateProjection();
            ValidateProgram();
            if (ProgramValid)
                RenderFrame();
            GLControl.SwapBuffers();
            MakeCurrent(false);
        }

        private void RenderFrame()
        {
            ShaderStart();
            LoadTimeValue();
            for (int traceIndex = 0; traceIndex < Scene._Traces.Count; traceIndex++)
            {
                var trace = Scene._Traces[traceIndex];

                LoadTraceIndex(traceIndex);
                LoadTransform(trace);
                ValidateVao(trace);
                GL.BindVertexArray(trace._VaoID);
                GL.EnableVertexAttribArray(0);

                GL.DrawElements(PrimitiveType.TriangleStrip, trace._VaoVertexCount, DrawElementsType.UnsignedInt, 0);

                //GL.DrawArrays(PrimitiveType.LineStrip, 0, prototype.VertexCount);
                //GL.DrawElements(BeginMode.Triangles, prototype.VertexCount, DrawElementsType.UnsignedInt, 0);


                GL.DisableVertexAttribArray(0);
                GL.BindVertexArray(0);
                UnbindVao();
            }
            ShaderStop();
        }































